        -:    0:Source:tree.hpp
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:#include <iostream>
        -:    3:#include <iostream>
        -:    4:#include <string>
        -:    5:#include <vector>
        -:    6:#include <algorithm>
        -:    7:#include <climits>
        -:    8:
        -:    9:#include "graph.hpp"
        -:   10:
        -:   11:
        -:   12:using namespace std;
        -:   13:
        -:   14:
        -:   15:class Tree
        -:   16:{
        -:   17:    vector<vector<int>> adj;
        -:   18:    int V;
        -:   19:	vector<vector<int>> dist;
        -:   20:	
        -:   21:
        -:   22:    public:
        -:   23:        Tree(int m, int n): V(n){
        -:   24:            adj = vector<vector<int>>(n, vector<int>(n, 0));
        -:   25:            cout << "format: 'a' 'b' " << endl;
        -:   26:            string line;
        -:   27:            for(int i = 0; i < m; i++){
        -:   28:                getline(cin, line);
        -:   29:                int a = stoi(line.substr(0, line.find(" ")));
        -:   30:                cout << "a: " << a << endl;
        -:   31:                int b = stoi(line.substr(line.find(" ") + 1, line.length()));
        -:   32:                cout << "b: " << b << endl;
        -:   33:                if(a != b){
        -:   34:                    cout << "enter weight: "<<endl;
        -:   35:                    int w;
        -:   36:                    cin>>w;
        -:   37:                    adj[a][b] = w;
        -:   38:                }
        -:   39:                else{
        -:   40:                    i--;
        -:   41:                }
        -:   42:            }
        -:   43:        }
        -:   44:
        1:   45:		Tree() = default;
        -:   46:
        -:   47:		Tree(const Graph& other){
        -:   48:			adj = other.getAdj();
        -:   49:            V = other.getV();
        -:   50:		}
        -:   51:
        -:   52:		Tree(const Tree& other){
        -:   53:			adj = other.getAdj();
        -:   54:            V = other.getV();
        -:   55:		}
        -:   56:
        -:   57:		Tree(const vector<vector<int>> other){
        -:   58:			adj = other;
        -:   59:            V = other.size();
        -:   60:		}
        -:   61:
        -:   62:		//Tree& operator=(const Tree
        -:   63:
       36:   64:		int getWeight(int a, int b) const {
       36:   65:            return this->adj[a][b];
        -:   66:        }
        -:   67:
        -:   68:
        6:   69:        vector<vector<int>> getAdj() const {
        6:   70:            return this->adj;
        -:   71:        }
        -:   72:
       70:   73:        int getV() const {
       70:   74:            return this->V;
        -:   75:        }
        -:   76:
        -:   77:        void print(){
        -:   78:            for(int i = 0; i < V; i++){
        -:   79:                for(int j = 0; j < V; j++){
        -:   80:                    cout << adj[i][j] << " ";
        -:   81:                }
        -:   82:                cout << endl;
        -:   83:            }
        -:   84:        }
        -:   85:
        1:   86:		int calc_weight(){
        1:   87:			int weight = 0;
        4:   88:            for(int i = 0; i < V; i++){
        6:   89:                for(int j = i+1; j < V; j++){
        3:   90:                    if(adj[i][j] != 0){
        2:   91:                        weight += adj[i][j];
        -:   92:                    }
        -:   93:                }
        -:   94:            }
        1:   95:            return weight;
        -:   96:		}
        -:   97:
        6:   98:		void floydWarshall() {
        -:   99:
        -:  100:			// Distance matrix initialized with the input graph's adjacency matrix
        6:  101:			this->dist = this->adj;
        -:  102:
       24:  103:			for (int i = 0; i < this->dist.size(); i++){
       72:  104:				for (int j = 0; j < this->dist[i].size(); j++) {
       54:  105:                    if (i == j) {
       18:  106:                        this->dist[i][j] = 0;
        -:  107:                    } else {
       36:  108:						if (this->dist[i][j] == 0)
       24:  109:							this->dist[i][j] = INT_MAX;
        -:  110:                    }
        -:  111:                }
        -:  112:			}
        -:  113:
        -:  114:			// Floyd-Warshall algorithm
       24:  115:			for (int k = 0; k < this->V; k++) {
       72:  116:				for (int i = 0; i < this->V; i++) {
      216:  117:					for (int j = 0; j < this->V; j++) {
     162*:  118:						if (this->dist[i][k] != INT_MAX && this->dist[k][j] != INT_MAX && this->dist[i][k] + this->dist[k][j] < this->dist[i][j]) {
    #####:  119:							this->dist[i][j] = this->dist[i][k] + this->dist[k][j];
        -:  120:						}
        -:  121:					}
        -:  122:				}
        -:  123:			}
        6:  124:		}
        -:  125:
        1:  126:		int minDistance() {
        1:  127:			int min = INT_MAX;
        4:  128:            for (int v = 0; v < this->dist.size(); v++) {
       12:  129:				for (int i = 0; i < this->dist[v].size(); i++) {
        9:  130:					if (this->dist[v][i] < min && i != v){
        1:  131:						min = this->dist[v][i];
        -:  132:					}
        -:  133:				}
        -:  134:            }
        1:  135:            return min;
        -:  136:		}
        -:  137:
        1:  138:		int maxDistance() {
        1:  139:			int max = INT_MIN;
        4:  140:            for (int v = 0; v < this->dist.size(); v++) {
       12:  141:				for (int i = 0; i < this->dist[v].size(); i++) {
        9:  142:					if (this->dist[v][i] > max && this->dist[v][i] != INT_MAX){
        3:  143:						max = this->dist[v][i];
        -:  144:					}
        -:  145:				}
        -:  146:            }
        1:  147:            return max;
        -:  148:		}
        -:  149:
        1:  150:		int avgDistance() {
        1:  151:			int sum = 0;
        1:  152:			int count = 0;
        4:  153:            for (int v = 0; v < this->V; v++) {
        9:  154:				for (int i = v; i < this->V; i++) {
        6:  155:					if (this->dist[v][i] != INT_MAX && v != i){
        2:  156:						sum += this->dist[v][i];
        2:  157:						count++;
        -:  158:					}
        -:  159:				}
        -:  160:            }
        1:  161:            return sum / count;
        -:  162:		}
        -:  163:
        6:  164:        Tree& operator=(const Tree& other){
        6:  165:            adj = other.getAdj();
        6:  166:            V = other.getV();
        6:  167:            return *this;
        -:  168:        }
        -:  169:};
